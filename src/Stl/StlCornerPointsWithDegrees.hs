module Stl.StlCornerPointsWithDegrees( (|@~?+++^|), FacesWithRange(..), {-(||@~?+++^||),-} cornerPointsWithDegreesToTriangles{- (@~+++^)-}) where

import Stl.StlCornerPoints((+++^), Faces(..))
import Stl.StlBase(Triangle(..))

import CornerPoints.CornerPointsWithDegrees (CornerPointsWithDegrees(..), DegreeRange(..), cornerPointsWithDegreesWithinRange)

{- |
Convert [CornerPointsWithDegrees] into a [Triangle] for writing to an stl file.
-}


data FacesWithRange = FacesWithRange {_face::Faces, _range::DegreeRange}



{-
Extract the CornerPoint and generate [Triangle] as dictated by Faces type constructor.
-}
(@~+++^) :: Faces -> CornerPointsWithDegrees -> [Triangle]
face @~+++^ (CubesWithStartEndDegrees cPnt _) = face +++^ cPnt

{- |
Extract the [CornerPoint] from the [CornerPointsWithDegrees] that are with the degree range given by (FacesWithRange _ range),
and generate the  [Triangle] as dictated by (FacesWithRange face _), for writing an stl file.
-}
(|@~?+++^|) :: FacesWithRange -> [CornerPointsWithDegrees] -> [[Triangle]] 
(FacesWithRange face range) |@~?+++^| cornerPointsWithDegrees   =
     [face @~+++^  x | x <-  cornerPointsWithDegreesWithinRange range  cornerPointsWithDegrees]

{- |
Process a [[CornerPointsWithDegrees]] using a  [FacesWithRange] to produce a [[Triangle]] for printing an stl file.
It is a wrapper around (|@~?+++^|), for working with results of a Builder.

The [[CornerPointsWithDegrees]] is generated by a Builder, while building up a shape.
A [FacesWithRange] is then manually biult, for processing the shape into stl.
-}
(||@~?+++^||) :: [FacesWithRange] -> [CornerPointsWithDegrees] -> [[Triangle]]
facesWithRanges ||@~?+++^|| cornerPointsWithDegrees =
  concat  [x |@~?+++^| cornerPointsWithDegrees | x <- facesWithRanges]

{- Process a [CornerPointsWithDegrees] into stl [Triangle]'s. Usally used via (||@~+++^||) to process an entire shape. -}
--ToDo: Should this be moved to Stl.StlCornerPointsWithDegrees, and is it really required, as all it does is supply a 'concat' to  ||@~?+++^||
cornerPointsWithDegreesToTriangles ::  [CornerPointsWithDegrees] -> [FacesWithRange] -> [Triangle]
cornerPointsWithDegreesToTriangles cornerPointsList facesWithRangeList =
  concat $ facesWithRangeList  ||@~?+++^|| cornerPointsList
